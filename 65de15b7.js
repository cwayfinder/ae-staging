class t{constructor(){this.buildingIdIncrement=1,this.unitIdIncrement=1,this.graveIdIncrement=1}getBattle(){return this.battle}getPlayers(){return this.players}getPlayer(t){return this.players.find((e=>e.id===t))}getTerrains(){return this.terrains}getBuildings(){return this.buildings}getUnits(){return this.units}getGraves(){return this.graves}createBattle(t,e,i){this.battle={...t,ended:!1},this.players=e.map((t=>({...t,wispAura:[]}))),this.battle.activePlayerId=0,this.terrains=i,this.buildingIdIncrement=1,this.unitIdIncrement=1,this.graveIdIncrement=1,this.buildings=[],this.units=[],this.graves=[]}updateBattle(t){this.battle={...this.battle,...t}}addBuilding(t){const e=this.buildingIdIncrement++;return t={...t,id:e},this.buildings.push(t),t}addUnit(t){const e=this.unitIdIncrement++;return t={...t,id:e},this.units.push(t),t}addGrave(t){const e=this.graveIdIncrement++;return t={...t,id:e},this.graves.push(t),t}removeUnit(t){this.units=this.units.filter((e=>e.id!==t))}removeGrave(t){this.graves=this.graves.filter((e=>e.id!==t))}toJSON(){return JSON.stringify({battle:this.battle,players:this.players,terrains:this.terrains,buildings:this.buildings,units:this.units,graves:this.graves,buildingIdIncrement:this.buildingIdIncrement,unitIdIncrement:this.unitIdIncrement,graveIdIncrement:this.graveIdIncrement})}static fromJSON(e){return{...new t,...JSON.parse(e)}}}window.BattleRepository=t;
