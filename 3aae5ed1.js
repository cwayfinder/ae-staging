window.scenarioCollector=new class{constructor(e,t){this.unitService=e,this.repo=t}collect(e){return this.repo.getUnits({ownerId:e}).flatMap((e=>this.getUnitScenarios(e)))}getUnitScenarios(e){return this.unitService.getActions(e.id).filter((e=>["move","remain"].includes(e.type))).flatMap((t=>this.getUnitScenariosAfterMove(e,t)))}getUnitScenariosAfterMove(e,t){const i=e.cell,n=[];n.push({origin:i,unit:e,actions:[t,{type:"wait",cell:i}]}),"move"===t.type&&(e.cell=t.cell,e.didMove=!0);const o=this.unitService.getActions(e.id);for(const r of o)["remain","move"].includes(r.type)||n.push({origin:i,unit:e,actions:[t,r]});return"move"===t.type&&(e.cell=i,e.didMove=!1),n}}(window.unitService,window.battleRepository);
