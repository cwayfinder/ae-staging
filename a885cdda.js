import{u as e}from"./c1c0f9e5.js";import{B as t}from"./dbbb96b8.js";window.scriptingService=new class{constructor(e,t,i,r){this.repo=e,this.crudService=t,this.eventService=i,this.battleService=r}checkPlayerDefeat(){const e=this.repo.getBattle();if(/skirmish|userMap/.test(e.type)){const e=this.repo.getPlayers({defeated:!1}).find((e=>this.playerIsDefeat(e.id)));e&&this.markPlayerAsDefeated(e)}}playerIsDefeat(e){return!(this.battleService.playerHasCastle(e)||this.battleService.playerHasCommander(e))}markPlayerAsDefeated(i){i.defeated=!0;const r=this.repo.getPlayers().filter((e=>!e.defeated));if(r.some((e=>e.teamId===i.teamId))){return r.every((e=>"ai"===e.type))?(this.repo.updateBattle({ended:!0}),void this.eventService.emitEvent(new t("battle","game-end",{victory:!1}))):(this.eventService.emitEvent(new t("battle","player-defeat",{name:"Player "+i.id,color:i.color})),void this.splitPlayerLegacy(i))}if(1!==e(r.map((e=>e.teamId))).length)this.eventService.emitEvent(new t("battle","player-defeat",{name:"Player "+i.id,color:i.color})),this.neutralizePlayerLegacy(i);else{this.repo.updateBattle({ended:!0});const e=r.every((e=>"ai"===e.type));this.eventService.emitEvent(new t("battle","game-end",{victory:!e}))}}splitPlayerLegacy(e){const t=this.repo.getPlayers({teamId:e.teamId,defeated:!1});t.forEach((i=>{i.money+=Math.floor(e.money/t.length)})),this.repo.getBuildings({ownerId:e.id}).forEach((e=>{const i=t[0];this.crudService.updateBuilding(e.id,{ownerId:i.id})})),this.repo.getUnits({ownerId:e.id}).forEach((e=>{const i=t[0];this.crudService.updateUnit(e.id,{ownerId:i.id})}))}neutralizePlayerLegacy(e){this.repo.getBuildings({ownerId:e.id}).forEach((e=>{this.crudService.updateBuilding(e.id,{ownerId:null})})),this.repo.getUnits({ownerId:e.id}).forEach((e=>this.crudService.removeUnit(e.id)))}async checkTriggers(){const e=this.repo.getTriggers().filter((e=>!e.done));for(const t of e)this.checkTrigger(t)&&(await this.processScript(t.scriptId),this.repo.updateTrigger(t.id,{done:!0}))}checkTrigger(e){return e.conditions.every((e=>this.checkCondition(e)))}checkCondition(e){const t=this.repo.getUnits(),i=t.filter((e=>1===e.ownerId)),r=t.filter((e=>2===e.ownerId)),n=this.repo.getBattle();switch(e.type){case"round":return n.round>=e.round;case"allCastles":return this.repo.getBuildings({type:"castle"}).every((({ownerId:e})=>1===e));case"noEnemyUnit":return!r.length;case"commanderIsDead":return!this.battleService.playerHasCommander(1);case"crystalIsDead":return!i.some((e=>"crystal"===e.type));case"unitOnPlace":return i.some((t=>e.areas.some((e=>{const{x:i,y:r}=t.cell;return i>=e.x1&&i<=e.x2&&r>=e.y1&&r<=e.y2}))))}return!1}async processScript(e){const t=this.repo.getScripts().find((t=>t.id===e));if(!t)throw new Error(`Script with id ${e} not found`);if(!t.done){for(const e of t.requires)this.processScript(e);for(const e of t.items)await this.processScriptItem(e);this.repo.updateScript(t.id,{done:!0})}}processScriptItem(e){var i,r,n;const s=this.repo.getBattle().i18n.en;switch(e.type){case"addUnits":e.units.forEach((e=>this.crudService.addUnit(e)));break;case"story":this.eventService.emitEvent(new t("battle","story",{id:e.storyId,sound:e.sound,content:null===(i=s.stories.find((t=>t.id===e.storyId)))||void 0===i?void 0:i.content}));break;case"conversation":this.eventService.emitEvent(new t("battle","conversation",{id:e.conversationId,character:e.character,position:e.position,text:null===(r=s.conversations.find((t=>t.id===e.conversationId)))||void 0===r?void 0:r.text,cell:e.cell}));break;case"notification":this.eventService.emitEvent(new t("battle","notification",{id:e.notificationId,sound:e.sound,content:null===(n=s.notifications.find((t=>t.id===e.notificationId)))||void 0===n?void 0:n.content}));break;case"objective":this.eventService.emitEvent(new t("battle","notification",{header:s.name,content:s.objective}));break;case"win":this.eventService.emitEvent(new t("battle","game-end",{victory:!0}));break;case"defeat":this.eventService.emitEvent(new t("battle","game-end",{victory:!1}));break;case"openMap":this.eventService.emitEvent(new t("battle","open-mission",{missionId:e.missionId}))}}}(window.battleRepository,window.crudService,window.eventService,window.battleService);
