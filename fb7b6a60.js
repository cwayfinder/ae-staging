import{u as e,d as t}from"./8b91577e.js";window.unitStoreService=new class{constructor(e,t,i,r){this.repo=e,this.crudService=t,this.battleService=i,this.selectionService=r}reviveUnit(e,t){const i=this.repo.getActivePlayer();if(this.repo.getUnits({ownerId:i.id}).length>=i.unitLimit)throw new Error("Player units limit reached");const r=this.repo.getUnit({id:e,dead:!0});if(r.cost>i.money)throw new Error(`Player ${i.id} doesn't have enough money to revive unit ${r.id}`);this.crudService.updatePlayer(i.id,{money:i.money-r.cost}),this.crudService.updateUnit(r.id,{dead:!1,cell:this.battleService.getClosestAvailableCell(t)}),this.selectionService.selectUnit(r.id)}buyUnit(t,i){const r=this.repo.getActivePlayer();if(this.repo.getUnits({ownerId:r.id}).length>=r.unitLimit)throw new Error("Player units limit reached");const n=e[t];if(n.cost>r.money)throw new Error(`Player ${r.id} doesn't have enough money to purchase unit ${t}`);this.crudService.updatePlayer(r.id,{money:r.money-n.cost});const o=this.crudService.addUnit({type:t,ownerId:r.id,cell:i});this.selectionService.selectUnit(o.id)}getRevivableUnits(){const t=this.repo.getActivePlayer();return this.repo.getUnits({ownerId:t.id,dead:!0}).map((t=>{const i=e[t.type];return{id:t.id,type:t.type,cost:t.cost,name:i.i18n.en.name,description:i.i18n.en.description,atk:t.atk,def:t.def,mov:t.mov}}))}getPurchasableUnits(){return(this.repo.getBattle().purchasableUnits||t).map((t=>{const i=e[t];return{type:i.langKey,cost:i.cost,name:i.i18n.en.name,description:i.i18n.en.description,atk:i.atk,def:i.def,mov:i.mov}}))}isUnitsTooMuch(){const{width:e,height:t}=this.repo.getBattle().size,i=Math.round(t*e/2);return i+i%this.repo.getPlayers().length<=this.repo.getUnits().length}}(window.battleRepository,window.crudService,window.battleService,window.selectionService);
