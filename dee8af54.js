class e{constructor(){this.buildingIdIncrement=1,this.unitIdIncrement=1,this.graveIdIncrement=1}getBattle(){return this.battle}getPlayers(e={}){let t=this.players;for(const[i,r]of Object.entries(e))if("enemy"===i){const e=this.players.find((e=>e.id===r));t=t.filter((t=>t.teamId!==(null==e?void 0:e.teamId)))}else if("ally"===i){const e=this.players.find((e=>e.id===r));t=t.filter((t=>(null==t?void 0:t.teamId)===(null==e?void 0:e.teamId)))}else t=t.filter((e=>e[i]===r));return t}getPlayer(e){return this.getPlayers(e)[0]}getActivePlayer(){return this.getPlayer({id:this.getBattle().activePlayerId})}getTerrains(){return this.terrains}getBuildings(e={}){let t=this.buildings;for(const[i,r]of Object.entries(e))if("cell"===i)t=t.filter((e=>e.cell.x===r.x&&e.cell.y===r.y));else if("enemy"===i){const e=this.players.find((e=>e.id===r));t=t.filter((t=>{if(null===t.ownerId)return!1;const i=this.players.find((e=>e.id===t.ownerId));return(null==i?void 0:i.teamId)!==(null==e?void 0:e.teamId)}))}else if("ally"===i){const e=this.players.find((e=>e.id===r));t=t.filter((t=>{if(null===t.ownerId)return!1;const i=this.players.find((e=>e.id===t.ownerId));return(null==i?void 0:i.teamId)===(null==e?void 0:e.teamId)}))}else if("neutralOrEnemy"===i){const e=this.players.find((e=>e.id===r));t=t.filter((t=>{if(null===t.ownerId)return!0;const i=this.players.find((e=>e.id===t.ownerId));return(null==i?void 0:i.teamId)!==(null==e?void 0:e.teamId)}))}else t="captured"===i?t.filter((e=>{const t=null!==e.ownerId;return r?t:!t})):"healing"===i?t.filter((e=>{if(["well","temple"].includes(e.type))return!0;if(null!==e.ownerId){const t=this.getPlayer({id:r}),i=this.getPlayer({id:e.ownerId});return["castle","farm"].includes(e.type)&&(null==i?void 0:i.teamId)===(null==t?void 0:t.teamId)}})):t.filter((e=>e[i]===r));return t}getBuilding(e){return this.getBuildings(e)[0]}getUnits(e={},t=!1){let i=this.units;for(const[t,r]of Object.entries(e))if("cell"===t)i=i.filter((e=>e.cell.x===r.x&&e.cell.y===r.y));else if("enemy"===t){const e=this.players.find((e=>e.id===r));i=i.filter((t=>{const i=this.players.find((e=>e.id===t.ownerId));return(null==i?void 0:i.teamId)!==(null==e?void 0:e.teamId)}))}else if("ally"===t){const e=this.players.find((e=>e.id===r));i=i.filter((t=>{if(null===t.ownerId)return!1;const i=this.players.find((e=>e.id===t.ownerId));return(null==i?void 0:i.teamId)===(null==e?void 0:e.teamId)}))}else i=i.filter((e=>e[t]===r));return t||(i=e.dead?i.filter((e=>e.dead)):i.filter((e=>!e.dead))),i}getUnit(e,t=!1){return this.getUnits(e,t)[0]}getGraves(e={}){let t=this.graves;for(const[i,r]of Object.entries(e))t="cell"===i?t.filter((e=>e.cell.x===r.x&&e.cell.y===r.y)):t.filter((e=>e[i]===r));return t}getGrave(e){return this.getGraves(e)[0]}getTriggers(){return this.triggers}getScripts(){return this.scripts}createBattle(e){this.preferences=e.preferences,this.battle=e.battle,this.players=e.players.map((e=>({...e,wispAura:[]}))),this.terrains=e.terrains,this.triggers=e.triggers,this.scripts=e.scripts,this.buildingIdIncrement=1,this.unitIdIncrement=1,this.graveIdIncrement=1,this.buildings=[],this.units=[],this.graves=[],this.counters=[]}updateBattle(e){this.battle={...this.battle,...e}}addBuilding(e){const t=this.buildingIdIncrement++;return e={...e,id:t},this.buildings.push(e),e}addUnit(e){const t=this.unitIdIncrement++;return e={...e,id:t},this.units.push(e),e}addGrave(e){const t=this.graveIdIncrement++;return e={...e,id:t},this.graves.push(e),e}removeUnit(e){this.units=this.units.filter((t=>t.id!==e))}removeGrave(e){this.graves=this.graves.filter((t=>t.id!==e))}updateBuilding(e,t){const i=this.getBuilding({id:e});if(!i)throw new Error(`Building with id ${e} not found`);for(const[e,r]of Object.entries(t))i[e]=r}updateUnit(e,t){const i=this.getUnit({id:e});if(!i)throw new Error(`Unit with id ${e} not found`);for(const[e,r]of Object.entries(t))i[e]=r}updateGrave(e,t){const i=this.getGrave({id:e});if(!i)throw new Error(`Grave with id ${e} not found`);for(const[e,r]of Object.entries(t))i[e]=r}updatePlayer(e,t){const i=this.getPlayer({id:e});if(!i)throw new Error(`Player with id ${e} not found`);for(const[e,r]of Object.entries(t))i[e]=r}updateTrigger(e,t){const i=this.triggers.find((t=>t.id===e));if(!i)throw new Error(`Trigger with id ${e} not found`);i.done=t.done}updateScript(e,t){const i=this.scripts.find((t=>t.id===e));if(!i)throw new Error(`Script with id ${e} not found`);i.done=t.done}toJSON(){return JSON.stringify({preferences:this.preferences,battle:this.battle,players:this.players,terrains:this.terrains,buildings:this.buildings,units:this.units,graves:this.graves,triggers:this.triggers,scripts:this.scripts,counters:this.counters,buildingIdIncrement:this.buildingIdIncrement,unitIdIncrement:this.unitIdIncrement,graveIdIncrement:this.graveIdIncrement})}fromJSON(e){const t=this,i=JSON.parse(e);return t.preferences=i.preferences,t.battle=i.battle,t.players=i.players,t.terrains=i.terrains,t.buildings=i.buildings,t.units=i.units,t.graves=i.graves,t.triggers=i.triggers,t.scripts=i.scripts,t.counters=i.counters,t.buildingIdIncrement=i.buildingIdIncrement,t.unitIdIncrement=i.unitIdIncrement,t.graveIdIncrement=i.graveIdIncrement,t}getBuildingHeal({cell:e,playerId:t}){const i=this.getBuilding({cell:e,healing:t});return(null==i?void 0:i.healthUp)||0}addCounter(e){this.counters.some((t=>t.name===e))||this.counters.push({name:e,value:0})}getCounterValue(e){var t;return null===(t=this.counters.find((t=>t.name===e)))||void 0===t?void 0:t.value}increaseCounters(){this.counters.forEach((e=>e.value++))}}window.BattleRepository=e,window.battleRepository=new e;
