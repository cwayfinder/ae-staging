import{d as e,a as t}from"./eeb3eefa.js";window.rating=new class{constructor(e,t,i){this.unitService=e,this.repo=t,this.battleService=i}rate(i){const r=i[0].unit.ownerId,s=this.unitService.getEnemyPossibleCaptures(r);this.threat=this.unitService.getPlayerThreat(r),i.forEach((i=>{i.actions.forEach((a=>{var l;a.rateFactors={};const o=a.cell,n=i.unit,c=a.data;if("move"===a.type){const e=n.cell;n.cell=a.cell;const t=this.unitService.getEnemyPossibleCaptures(r);n.cell=e;const i=s.castle||0,l=t.castle||0;l<i?a.rateFactors.captures=20:l>i&&(a.rateFactors.captures=-10)}if(["remain","move"].includes(a.type)){const t=this.battleService.getArmorByXY(o),i=this.repo.getBuilding({cell:o}),r=this.repo.getBuilding({cell:o,healing:n.ownerId}),s=this.repo.getBuilding({cell:o,enemy:n.ownerId}),l=n.defaultHealth/100*(n.defaultHealth-n.health),c=this.getThreatAtCell(o);if(c?(a.rateFactors.threat=-.05*c,l&&(a.rateFactors.threatForWounded=c*(l/100*-.1)),a.rateFactors.defBonus=t,a.rateFactors.building=i?1:0,a.rateFactors.enemyBuilding=s?5:0,r&&(a.rateFactors.healingBuilding=l?10:5)):(a.rateFactors.defBonus=t/5,a.rateFactors.building=i?1:0),l&&(r&&(a.rateFactors.heal=Math.min(l,r.healthUp)),l>50||n.abilities.includes("commander")&&l>40)){const t=this.repo.getBuildings({healing:n.ownerId}).filter((e=>!this.repo.getUnit({cell:e.cell}))).reduce(((t,i)=>Math.min(t,e(o,i.cell))),Number.POSITIVE_INFINITY);a.rateFactors.distanceToHealing=-1*t}if(l<50){const t=[];if(n.abilities.includes("castleCaptor")){const e=this.repo.getBuildings({type:"castle",neutralOrEnemy:n.ownerId});t.push(...e)}if(n.abilities.includes("villageCaptor")){const e=this.repo.getBuildings({type:"castle",neutralOrEnemy:n.ownerId});t.push(...e)}if(n.abilities.includes("destroyer")){const e=this.repo.getBuildings({type:"farm",enemy:n.ownerId});t.push(...e)}const i=this.repo.getUnits({enemy:n.ownerId});t.push(...i);const r=t.reduce(((t,i)=>Math.min(t,e(o,i.cell))),Number.POSITIVE_INFINITY);a.rateFactors.distanceToTarget=r*(c?-.05:-2)}}else if("raise-skeleton"===a.type)a.rateFactors.raise=50;else if("attack"===a.type){const e=this.repo.getUnit({cell:o});if(!e)throw new Error(`No unit found at cell {x: ${o.x}, y: ${o.y}`);const i=(null===(l=this.repo.preferences.players[1].aiPreferences)||void 0===l?void 0:l.aggression)||1;if(a.data.enemyUnit=e,c.killProbability>=.4)a.rateFactors.kill=(e.cost+e.health)*c.killProbability/5;else if(c.suicideProbability>.2)a.rateFactors.suicide=100*-c.suicideProbability;else{const e=t(c.dmg);c.responseDmg&&(a.rateFactors.revenge=-.5*t(c.responseDmg)),a.rateFactors.dmg=1.4*e+i}}else if("destroy-building"===a.type){this.repo.getBuilding({cell:o,enemy:n.ownerId})&&(a.rateFactors.enemyBuilding=50)}else if("occupy-building"===a.type){const e=this.repo.getBuilding({cell:o});if(!e)throw new Error(`No building found at cell {x: ${o.x}, y: ${o.y}`);a.rateFactors.buildingType="castle"===e.type?100:40}else"fix-building"===a.type&&(a.rateFactors.buildingType=20);a.rate=Object.values(a.rateFactors).reduce(((e,t)=>e+t),0)})),i.rate=i.actions.reduce(((e,t)=>e+t.rate),0)}))}getThreatAtCell(e){const t=this.threat.get(e);return t?t.reduce(((e,t)=>e+t.avg),0):0}}(window.unitService,window.battleRepository,window.battleService);
