import{u as e}from"./fbfb0d48.js";import{C as t}from"./bedfe3bf.js";import{i,s as l,a,g as r}from"./eeb3eefa.js";window.unitService=new class{constructor(e,t,i){this.repo=e,this.pathFinder=t,this.battleService=i}getActions(e){const t=this.repo.getUnit({id:e});if(!t)throw new Error("No unit found with id "+e);if(!t.active)return[];const i=[];if(this.canRepairBuilding(t)&&i.push({cell:t.cell,type:"fix-building"}),this.canCaptureBuilding(t)&&i.push({cell:t.cell,type:"occupy-building"}),i.push(...this.getGravesToRaise(t).map((e=>({type:"raise-skeleton",cell:e})))),i.push(...this.getUnitsUnderAttack(t).map((({cell:e,data:t})=>({type:"attack",cell:e,data:t})))),i.push(...this.getBuildingsUnderAttack(t).map((e=>({type:"destroy-building",cell:e})))),!t.didMove){const e=this.getCellsToMove(t).map((e=>({type:"move",cell:e.cell,data:this.getCellData(t,e.cell),path:e.path})));i.push(...e),i.push({type:"remain",cell:t.cell,data:this.getCellData(t,t.cell)})}return i}getPotentialAttackActions(e){const t=this.repo.getUnit({id:e});if(!t)throw new Error("No unit found with id "+e);const i=[];if(t.abilities.includes("stationary")){const e=this.getAttackMap(t).map((e=>({cell:e,type:"possible-attack"})));i.push(...e)}else{const e=this.getAvailableAttackMapWithPath(t).map((e=>({cell:e,type:"possible-attack"})));i.push(...e)}return i}getPotentialMoves(e){const t=this.repo.getUnit({id:e});if(t)return this.getAvailablePathWithTeamUnit(t).map((e=>e.cell)).map((e=>({cell:e,type:"move"})));throw new Error("No unit found with id "+e)}getPotentialCaptureActions(e){const t=[],i=this.repo.getUnit({id:e});if(i){const e=this.getAvailablePathWithTeamUnit(i).map((e=>e.cell));if(i.abilities.includes("castleCaptor")){const l=e.filter((e=>this.repo.getBuilding({cell:e,type:"castle",neutralOrEnemy:i.ownerId}))).map((e=>({cell:e,type:"possible-capture",buildingType:"castle"})));t.push(...l)}if(i.abilities.includes("villageCaptor")){const l=e.filter((e=>this.repo.getBuilding({cell:e,type:"farm",neutralOrEnemy:i.ownerId}))).map((e=>({cell:e,type:"possible-capture",buildingType:"farm"})));t.push(...l)}}return t}canRepairBuilding(e){if(e.abilities.includes("repairer")){return!!this.repo.getBuilding({cell:e.cell,state:"destroyed"})}return!1}canCaptureBuilding(e){const t=this.repo.getBuilding({cell:e.cell,neutralOrEnemy:e.ownerId,state:"normal"});if(t){if(e.abilities.includes("villageCaptor")&&"farm"===t.type)return!!t;if(e.abilities.includes("castleCaptor")&&"castle"===t.type)return!!t}return!1}getGravesToRaise(e){if(!e.abilities.includes("summoner"))return[];return this.pathFinder.getReachableCells({start:e.cell,range:e.raiseRange,moveType:"none"}).map((e=>e.cell)).filter((e=>this.repo.getGrave({cell:e})&&!this.repo.getUnit({cell:e})))}getUnitsUnderAttack(e){if(e.didAttack)return[];if("catapult"===e.type&&e.didMove)return[];const t=this.getAttackMap(e);return this.repo.getUnits({enemy:e.ownerId}).filter((e=>i(t,e.cell))).map((t=>({data:this.battleService.calculateAttackData(e,t),cell:t.cell})))}getBuildingsUnderAttack(e){if(e.didAttack)return[];if(e.abilities.includes("stationary")&&e.didMove)return[];if(e.abilities.includes("destroyer")){const t=this.getAttackMap(e);return this.repo.getBuildings({type:"farm",state:"normal",enemy:e.ownerId,captured:!0}).filter((e=>i(t,e.cell))).filter((e=>!this.repo.getUnit({cell:e.cell}))).map((e=>e.cell))}return[]}getCellsToMove(e){const t=this.getAvailablePathWithTeamUnit(e),i=this.repo.getUnits({ally:e.ownerId});return t.filter((e=>!l(i,e.cell)))}getAttackMap(e,t){t||(t=e.cell);const i=this.pathFinder.getReachableCells({start:t,range:"number"==typeof e.atkRange?e.atkRange:e.atkRange.max,moveType:"none"}).map((e=>e.cell));if("catapult"===e.type){const e=[{x:t.x-1,y:t.y},{x:t.x+1,y:t.y},{x:t.x,y:t.y-1},{x:t.x,y:t.y+1}];return i.filter((t=>!e.some((({x:e,y:i})=>e===t.x&&i===t.y))))}return i}getAvailablePathWithTeamUnit(t,i){if(t.didMove)return[];let a=t.mov;e(t,"poisoned")&&(a-=1);let r="walk";t.abilities.includes("waterborne")&&(r="flow"),t.abilities.includes("airborne")&&(r="fly");let s=[];i||(s=this.repo.getUnits({enemy:t.ownerId}).map((e=>`x${e.cell.x}y${e.cell.y}`)));const n=this.pathFinder.getReachableCells({start:t.cell,range:a,moveType:r,obstacles:s});if("catapult"===t.type)return n.filter((e=>!this.repo.getBuilding({cell:e.cell,type:"farm",state:"normal",enemy:t.ownerId,captured:!0})));if("sorceress"===t.type){const e=this.repo.getGraves();return n.filter((t=>!l(e,t.cell)))}return n}getAvailableAttackMapWithPath(e){const t=[e.cell];return this.getAvailablePathWithTeamUnit(e).map((e=>e.cell)).forEach((l=>{this.getAttackMap(e,l).filter((e=>!i(t,e))).forEach((e=>t.push(e)))})),t.shift(),t}getCellData(e,t){const i=e.cell;return e.cell=t,e.cell=i,{}}getPlayerThreat(e){const i=this.repo.getUnits({enemy:e}),l=new t;return i.forEach((e=>{this.getPotentialAttackActions(e.id).forEach((t=>{const i=t.cell,r=e.defaultHealth/100*e.health,s=e.def-this.battleService.getArmorByXY(i),n={type:e.type,dmg:{min:e.atk.min*r/100-s,max:e.atk.max*r/100-s},avg:Math.floor(a(e.atk)*r/100-s)},c=l.get(i)||[];c.push(n),l.set(i,c)}))})),l}getEnemyPossibleCaptures(e){const i=this.repo.getUnits({enemy:e}),l=new t;return i.map((e=>this.getPotentialCaptureActions(e.id).forEach((e=>{const t=e.cell;l.set(t,e.buildingType)})))),r(l.values())}}(window.battleRepository,window.pathFinder,window.battleService);
