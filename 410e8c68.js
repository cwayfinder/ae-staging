import{u as e}from"./8b91577e.js";import{i as t}from"./eeb3eefa.js";import{B as i}from"./dbbb96b8.js";window.crudService=new class{constructor(e,t,i){this.repo=e,this.battleService=t,this.eventService=i}addUnit(e){e.cell=this.battleService.getClosestAvailableCell(e.cell);const t=this.repo.addUnit(this.createUnit(e));return this.emitModelEvent("add-unit",t),"wisp"===t.type&&(this.refreshWispAura(t.ownerId),this.repo.getUnits({ally:t.ownerId}).forEach((e=>this.refreshUnitEffects(e)))),this.refreshUnitEffects(t),t}createUnit(t){const i=this.repo.getPlayer({id:t.ownerId});if(!i)throw new Error("Cannot fing player with id "+t.ownerId);let r;if("commander"===t.type){const e=this.repo.preferences.players.find((e=>e.id===i.id));r=null==e?void 0:e.commander}else r=t.type;const n=e[r],s={...t,...n,type:r,isActive:!0,effects:[]};s.health=t.health||100,s.defaultHealth=100,s.xp=t.xp||0;let d=0;return s.levelList.forEach(((e,t)=>{s.xp||(s.xp=0),s.xp>=e&&(d=t)})),s.level=d,s}addGrave({cell:e}){const t=this.repo.addGrave({cell:e,ttl:3});this.emitModelEvent("add-grave",t)}updateBattle(e){this.repo.updateBattle(e),this.emitModelEvent("update-battle",e)}updateBuilding(e,t){this.repo.updateBuilding(e,t),this.emitModelEvent("update-building",{id:e,update:t})}updateUnit(e,t){const i=this.repo.getUnit({id:e});if("xp"in t){let e=i.level;i.levelList.forEach(((t,r)=>{i.xp>=t&&(e=r)})),t.level=e}return this.repo.updateUnit(e,t),this.emitModelEvent("update-unit",{id:e,update:t}),"cell"in t&&("wisp"===i.type?(this.refreshWispAura(i.ownerId),this.repo.getUnits({ally:i.ownerId}).forEach((e=>this.refreshUnitEffects(e)))):this.refreshUnitEffects(i)),i}updateGrave(e,t){this.repo.updateGrave(e,t),this.emitModelEvent("update-grave",{id:e,update:t})}updatePlayer(e,t){this.repo.updatePlayer(e,t),this.emitModelEvent("update-player",{id:e,update:t})}removeUnit(e){const t=this.repo.getUnit({id:e},!0);if(this.repo.removeUnit(e),this.emitModelEvent("remove-unit",e),!t)throw new Error(`Unit with id ${e} not found`);"wisp"===t.type&&(this.refreshWispAura(t.ownerId),this.repo.getUnits({ally:t.ownerId}).forEach((e=>this.refreshUnitEffects(e))))}removeGrave(e){this.repo.removeGrave(e),this.emitModelEvent("remove-grave",e)}addUnitEffect(e,t){const i=this.repo.getUnit({id:e});if(!i)throw new Error(`Unit with id ${e} not found`);const r=i.effects.find((e=>e.type===t.type));r?"poisoned"===t.type&&(r.data.rounds=Math.max(r.data.rounds,t.data.rounds),this.emitModelEvent("update-unit-effect",{unitId:i.id,currentEffect:r})):(i.effects.push(t),this.emitModelEvent("add-unit-effect",{unitId:i.id,effect:t}))}updateUnitEffect(e,t,i){const r=this.repo.getUnit({id:e});if(!r)throw new Error(`Unit with id ${e} not found`);const n=r.effects.find((e=>e.type===t));if(!n)throw new Error("Unit has no effect with type "+t);n.data=i,this.emitModelEvent("update-unit-effect",{unitId:r.id,effect:n})}removeUnitEffect(e,t){const i=this.repo.getUnit({id:e});if(!i)throw new Error(`Unit with id ${e} not found`);i.effects.some((e=>e.type===t))&&(i.effects=i.effects.filter((e=>e.type!==t)),this.emitModelEvent("remove-unit-effect",{unitId:i.id,effectType:t}))}refreshWispAura(e){const t=this.repo.getUnits({ownerId:e,type:"wisp"}).map((e=>this.battleService.getWispAuraMap(e))).flat();this.updatePlayer(e,{wispAura:t})}refreshUnitEffects(e){const i=this.repo.getPlayers({ally:e.ownerId}).map((e=>e.wispAura)).flat();t(i,e.cell)?this.addUnitEffect(e.id,{type:"inspired",data:{}}):this.removeUnitEffect(e.id,"inspired")}emitModelEvent(e,t){this.eventService.emitEvent(new i("crud",e,t))}}(window.battleRepository,window.battleService,window.eventService);
